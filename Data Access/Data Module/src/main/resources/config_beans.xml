<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:context="http://www.springframework.org/schema/context" 
xmlns:jpa="http://www.springframework.org/schema/data/jpa"
xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/data/jpa
        https://www.springframework.org/schema/data/jpa/spring-jpa.xsd">


    <import resource="util_beans.xml" />

    <!-- Using the repositories element looks up Spring Data repositories
    Beyond that, it activates persistence exception translation for all 
    beans annotated with @Repository, to let exceptions being thrown by
     the JPA persistence providers be converted into Springâ€™s DataAccessException hierarchy. -->

    <jpa:repositories base-package="iti.labs.spring.data.repository" />

    <!-- bean post-processor for JPA annotations -->
    <!-- As an alternative to explicitly defining a PersistenceAnnotationBeanPostProcessor,
        consider using the Spring context:annotation-config XML element in your
         application context configuration. -->

    <!-- <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" /> -->

    <context:annotation-config />

    <context:component-scan base-package="iti.labs.spring.data" />


    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${db.driver}" />
        <property name="url" value="${db.jdbcurl}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />
    </bean>


    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" ref="dbProps" />
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="iti.labs.spring.data" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.globally_quoted_identifiers">true</prop>
                <prop key="javax.persistence.schema-generation.database.action">update</prop>
                <!-- <prop key="hbm2ddl.auto">update</prop> -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.dialect.storage_engine">innodb</prop>
            </props>
        </property>
    </bean>

    <!-- Transactions -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
        <qualifier value="txManager"/>
    </bean>
   
</beans>